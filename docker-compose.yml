version: '3.1'

services:
  front:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        PORT: ${FRONTEND_PORT}
    container_name: tm_web
    ports:
      - '${FRONTEND_PORT}:${FRONTEND_PORT}'
    networks:
      - TM
  api:
    build:
      context: api
      dockerfile: Dockerfile
    container_name: tm_api
    ports:
      - '${API_PORT}:${API_PORT}'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_PROD_HOST}
      DATABASE_URL: ecto://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      FRONTEND_URL: ${FRONTEND_URL}
      API_PORT: ${API_PORT}
      PORT: ${API_PORT}
      MIX_ENV: prod
      SECRET_KEY_BASE: fuF/Xx/drIahQh4OI4M1pP88mE3ahrg7cGE6zqD/eqpgk1Q7oXxsVsT5R2QWluSW

    networks:
      - TM
    depends_on:
      - db
  db:
    image: postgres
    container_name: tm_db
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - TM

  adminer:
    image: adminer
    container_name: tm_adminer
    restart: always
    ports:
      - '8080:8080'
    networks:
      - TM
  server_web:
    image: nginx
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
    command: [ nginx-debug, '-g', 'daemon off;' ]
    ports:
      - '80:80'
    networks:
      - TM
    depends_on:
      - front
networks:
  TM:
    driver: bridge
