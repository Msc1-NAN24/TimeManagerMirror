_id: spc_0f928c83986d431fa1b71443e9ef6db0
type: ApiSpec
parentId: wrk_7f42856afd4e4c20ac0f80bc87e6a675
modified: 1667831158354
created: 1667577225915
fileName: timemanager.yaml
contents: >
  openapi: 3.0.1

  info:
    title: Gotham Time Manager
    description: A time manager to keep track of the Gotham City Hall employees' working hours.
    version: 1.0.0
  servers:
    - url: http://localhost:4000/api
  tags:
    - name: Authentication
      description: Login and registration
    - name: Working Times
      description: Management of the working times of the Gotham City Hall employees.
    - name: Users
      description: Management of the Gotham City Hall employees.
    - name: Teams
      description: Management of the teams of the Gotham City Hall employees.
    - name: Public
      description: Visible by anyone
    - name: Employees
      description: Visible by any authenticated user
    - name: Managers
      description: Visible by managers
    - name: General Manager
      description: Visible by the General Manager
  paths:
    /auth/login:
      post:
        summary: User login
        description: Used by employees to login to the system
        operationId: login
        tags:
          - Authentication
          - Public
        requestBody:
          description: Login credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          required: true
        responses:
          '200':
            description: Login successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserInfo'
          '400':
            description: Login failed
          '500':
            description: Internal server error
    /auth/register:
      post:
        summary: User registration
        description: Used by employees to register into the system
        operationId: register
        tags:
          - Authentication
          - Public
        requestBody:
          description: Registration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          required: true
        responses:
          '200':
            description: Registration successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
          '409':
            description: User already exists
          '500':
            description: Internal server error
    /users/me:
      get:
        summary: Get user information
        description: Provides information about the logged in user
        operationId: getUser
        tags:
          - Users
          - Employees
        responses:
          '200':
            description: User information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      put:
        summary: Update user information
        description: Updates the logged in user's information
        operationId: updateUser
        tags:
          - Users
          - Employees
        requestBody:
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUser'
        responses:
          '200':
            description: User information updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      delete:
        summary: Delete user
        description: Deletes the logged in user
        operationId: deleteUser
        tags:
          - Users
          - Employees
        responses:
          '200':
            description: User deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /users/reset-password:
      post:
        summary: Reset the user's password
        description: Used by the user to reset their password
        operationId: resetPassword
        tags:
          - User
          - Employees
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
        responses:
          '200':
            description: Password reset
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '500':
            description: Internal Server Error
    /users/{id}:
      get:
        summary: Get user information
        description: Provides information about the logged in user
        operationId: getUserById
        tags:
          - Users
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the user to get
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      put:
        summary: Update user information
        description: Updates the logged in user's information
        operationId: updateUserById
        tags:
          - Users
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the user to edit
            required: true
            schema:
              type: integer
        requestBody:
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUser'
        responses:
          '200':
            description: User information updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      delete:
        summary: Delete user
        description: Deletes the logged in user
        operationId: deleteUserById
        tags:
          - Users
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the user to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /users/{id}/reset-password:
      post:
        summary: Reset a user's password
        description: Used by the general manager to reset a user's password
        operationId: resetUserPassword
        tags:
          - User
          - General Manager
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetUserPassword'
        parameters:
          - name: id
            in: path
            description: ID of the user to reset the password of
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Password reset
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '500':
            description: Internal Server Error
    /clocks:
      get:
        summary: Get current clock status
        description: Provides information about the logged in user's current clock status
        operationId: getClockStatus
        tags:
          - Working Times
          - Employees
        responses:
          '200':
            description: Clock status
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClockStatus'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      post:
        summary: Clock in/out
        description: "Used by employees to clock in/out. Upon clocking out, a new workingtimes entry is created for the user."
        operationId: clock
        tags:
          - Working Times
          - Employees
        responses:
          '200':
            description: Clock in/out successful
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /workingtimes/user/{id}:
      get:
        summary: Get working times
        description: Used by employees to get their working times.
        operationId: getWorkingTimes
        tags:
          - Working Times
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the working time to get
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Working times
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTimes'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      post:
        summary: Add working times manually
        description: Used by employees to add working times manually.
        operationId: addWorkingTimes
        tags:
          - Working Times
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the working time to add a workingtime for
            required: true
            schema:
              type: integer
        requestBody:
          description: Working time to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkingTime'
          required: true
        responses:
          '201':
            description: Working times added
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /workingtimes/user/{userId}/{id}:
      get:
        summary: Get working times
        description: Used by employees to get a specific workingtime
        operationId: getUserWorkingTime
        tags:
          - Working Times
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the working time to get
            required: true
            schema:
              type: integer
          - name: userId
            in: path
            description: ID of the user checking their workingtimes
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Working time
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTime'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /workingtimes/entry/{id}:
      get:
        summary: Get working times
        description: Used by managers to get a specific workingtime
        operationId: getWorkingTime
        tags:
          - Working Times
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the working time to get
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Working time
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTime'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      post:
        summary: Add working times
        description: Used by managers to edit working times.
        operationId: createWorkingTimes
        tags:
          - Working Times
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the working time to edit
            required: true
            schema:
              type: integer
        requestBody:
          description: Working time to edit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkingTime'
          required: true
        responses:
          '200':
            description: Working times created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTime'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      put:
        summary: Edit working times
        description: Used by managers to edit working times.
        operationId: editWorkingTimes
        tags:
          - Working Times
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the working time to edit
            required: true
            schema:
              type: integer
        requestBody:
          description: Working time to edit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditWorkingTime'
          required: true
        responses:
          '200':
            description: Working times edited
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTime'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      delete:
        summary: Delete working times
        description: Used by employees to delete working times.
        operationId: deleteWorkingTimes
        tags:
          - Working Times
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the working time to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Working times deleted
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /teams:
      get:
        summary: Get teams
        description: Used by employees to get their teams.
        operationId: getTeams
        tags:
          - Teams
          - Employees
        responses:
          '200':
            description: Teams
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Teams'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      post:
        summary: Create a new team
        description: Used by managers to create a new team
        operationId: createTeam
        tags:
          - Teams
          - Managers
        requestBody:
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTeam'
        responses:
          '201':
            description: Team created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /teams/{id}:
      get:
        summary: Get team
        description: Used by employees to get a team.
        operationId: getTeam
        tags:
          - Teams
          - Employees
        parameters:
          - name: id
            in: path
            description: ID of the team to get
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Team
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      patch:
        summary: Update team information
        description: Used by managers to update a team's information
        operationId: updateTeam
        tags:
          - Teams
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the team to update
            required: true
            schema:
              type: integer
        requestBody:
          description: Team information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditTeam'
        responses:
          '200':
            description: Team information updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
      delete:
        summary: Delete team
        description: Used by managers to delete a team
        operationId: deleteTeam
        tags:
          - Teams
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the team to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Team deleted
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /teams/{id}/members/add:
      post:
        summary: Add team members
        description: Used by managers to add members to a team
        operationId: addTeamMembers
        tags:
          - Teams
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the team to add members to
            required: true
            schema:
              type: integer
        requestBody:
          description: Team members to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTeamMember'
        responses:
          '200':
            description: Team members added
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /teams/{id}/members/remove:
      post:
        summary: Remove team member
        description: Used by managers to remove a member from a team
        operationId: removeTeamMember
        tags:
          - Teams
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the team to remove members
            required: true
            schema:
              type: integer
        requestBody:
          description: Team member to remove
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveTeamMember'
        responses:
          '200':
            description: Team member removed
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /workingtimes/team/{id}:
      get:
        summary: Get team working times
        description: Used by managers to get a team's working times.
        operationId: getTeamWorkingTimes
        tags:
          - Teams
          - Working Times
          - Managers
        parameters:
          - name: id
            in: path
            description: ID of the team to get working times from
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Team working times
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkingTimes'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /users/{id}/promote:
      post:
        summary: Promote user
        description: Used by the general manager to promote a user to manager
        operationId: promoteUser
        tags:
          - Users
          - General Manager
        parameters:
          - name: id
            in: path
            description: ID of the user to promote
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User promoted
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
    /users/{id}/revoke:
      post:
        summary: Demote user
        description: Used by the general manager to demote a user from manager
        operationId: demoteUser
        tags:
          - Users
          - General Manager
        parameters:
          - name: id
            in: path
            description: ID of the user to demote
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User demoted
          '401':
            description: Unauthorized
          '500':
            description: Internal server error
  components:
    schemas:
      Login:
        type: object
        properties:
          email:
            type: string
            format: email
          password:
            type: string
            format: password
        required:
          - email
          - password
      UserInfo:
        type: object
        properties:
          token:
            type: string
            format: JWT
          user:
            $ref: '#/components/schemas/User'
      Register:
        type: object
        properties:
          firstname:
            type: string
          lastname:
            type: string
          email:
            type: string
            format: email
          password:
            type: string
            format: password
      Users:
        type: array
        items:
          $ref: '#/components/schemas/User'
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          email:
            type: string
            format: email
          firstname:
            type: string
          lastname:
            type: string
          role:
            type: string
            enum:
              - employee
              - manager
              - general-manager
      CreateUser:
        type: object
        properties:
          email:
            type: string
            format: email
          firstname:
            type: string
          lastname:
            type: string
          password:
            type: string
            format: password
        required:
          - email
          - firstname
          - lastname
          - password
      EditUser:
        type: object
        properties:
          email:
            type: string
          firstname:
            type: string
          lastname:
            type: string
      WorkingTimes:
        type: object
        properties:
          workingTimes:
            type: array
            items:
              $ref: '#/components/schemas/WorkingTime'
      WorkingTime:
        type: object
        properties:
          id:
            type: integer
            format: int64
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
          user:
            type: object
            properties:
              id:
                type: integer
                format: int64
      CreateWorkingTime:
        type: object
        properties:
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
        required:
          - start
          - end
      EditWorkingTime:
        type: object
        properties:
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
      Teams:
        type: object
        properties:
          teams:
            type: array
            items:
              $ref: '#/components/schemas/Team'
      Team:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          owner:
            $ref: '#/components/schemas/User'
          members:
            type: array
            items:
              $ref: '#/components/schemas/User'
      CreateTeam:
        type: object
        properties:
          name:
            type: string
        required:
          - name
      EditTeam:
        type: object
        properties:
          name:
            type: string
      AddTeamMember:
        type: object
        properties:
          user_id:
            type: integer
            format: int64
        required:
          - members
      RemoveTeamMember:
        type: object
        properties:
          user_id:
            type: integer
            format: int64
        required:
          - user_id
      ClockStatus:
        type: object
        properties:
          id:
            type: integer
            format: int64
          status:
            type: boolean
          time:
            type: string
            format: date-time
      ResetUserPassword:
        type: 'object'
        properties:
          new_password:
            type: string
            format: password
            minimum: 8
      ResetPassword:
        type: 'object'
        properties:
          new_password:
            type: string
            format: password
            minimum: 8
          last_password:
            type: string
            format: password
contentType: yaml
