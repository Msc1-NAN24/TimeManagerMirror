version: '3.1'

services:
  base:
      env_file:
        - .env.prod
  client:
    extends:
        service: base
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        PORT: ${FRONTEND_PORT}
    container_name: tm_client
    environment:
      VITE_PORT_API: ${API_PORT}
      VITE_URL_API: ${API_URL}
      VIRTUAL_HOST: ${VIRTUAL_HOST_FRONT}
    expose:
      - 4500

  api:
    extends:
      service: base
    build:
      context: api
      dockerfile: Dockerfile
      args:
        PORT: ${API_PORT}
    container_name: tm_api
    ports:
      - '${API_PORT}:${API_PORT}'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_PROD_HOST}
      FRONTEND_URL: ${FRONTEND_URL}
      API_PORT: ${API_PORT}
      VIRTUAL_HOST: ${VIRTUAL_HOST_API}
    networks:
      - TM
    depends_on:
      - db

  db:
    extends:
      service: base
    image: postgres
    container_name: tm_db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - TM

  nginx-proxy:
      image: jwilder/nginx-proxy
      network_mode: bridge
      ports:
        - "80:80"
      volumes:
        - /var/run/docker.sock:/tmp/docker.sock:ro

